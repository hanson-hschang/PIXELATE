[project]
name = "pixelate"
version = "0.0.1"
authors = [
    {name = "Heng-Sheng Chang"},
]
description = "a Command Line Interface (CLI) tool that generates pixel art images"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pillow>=10.0.0",
    "types-Pillow",
    "click>=8.0.0",
    "matplotlib",
]

[project.urls]
"Homepage" = "https://github.com/hanson-hschang/pixelate"
"Bug Reports" = "https://github.com/hanson-hschang/pixelate/issues"
"Source" = "https://github.com/hanson-hschang/pixelate"

[project.scripts]
pixelate = "pixelate.cli:main"

[project.optional-dependencies]
dev = [
    "pyupgrade>=3.15.2",
    "pytest>=8.0.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=5.0.0",
    "pytest-dependency>=0.6.0",
    "codecov>=2.1.13",
    "ruff",
    "mypy>=1.0.0",
    "mypy-extensions>=1.0.0",
    "bandit[toml]>=1.7.0",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
# Tell Hatch where to find your package source code.
packages = ["src/pixelate"]

[tool.hatch.build.targets.sdist]
# Ensure the source directory is included in the source distribution.
include = ["/src"]

[tool.pytest.ini_options]
norecursedirs = [
    "hooks",
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__",
]
doctest_optionflags = [
    "NUMBER",
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
addopts = [
    "--strict-markers",
    "--tb=short",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover", # Enable pragma
    "TODO",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == __main__:",
    "def __repr__",
    "def plot_.*\\b",
    "if self.debug:",
    "if settings.DEBUG",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\."
]
fail_under = 30
show_missing = true

[tool.coverage.run]
branch = true
omit = [
    "*/.local/*",
    "setup.py",
]

[tool.ruff]
# Set the line length for both the linter and formatter.
line-length = 79

# Set the target Python version.
target-version = "py311"

# Define files and directories to be excluded from checks.
# Ruff uses glob patterns and merges the lists.
exclude = [
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "env",
    "venv",
]

[tool.ruff.lint]
# Select the rule sets to enable.
# "E" (pycodestyle errors), "W" (pycodestyle warnings), and "F" (Pyflakes)
# are a good starting point to replicate flake8's default behavior.
select = ["E", "F", "W"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
